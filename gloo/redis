#!/usr/bin/env python3

import ray
import subprocess

ray.init()
    
@ray.remote(num_cpus=0)
class RedisActor:
    def __init__(self):
        self.redis_server_proc = None

    def start(self, port):
        subprocess.run("sudo apt-get install redis -y", shell=True)
        subprocess.run("pkill redis-server", shell=True)
        self.redis_server_proc = subprocess.Popen(f"redis-server --port {port} --protected-mode no", shell=True)
        
        import time
        time.sleep(5)

        import socket
        return socket.gethostname()

    def stop(self):
        print('Killing redis')
        self.redis_server_proc.kill()
        self.redis_server_proc = None

def schedule_on_node(node, soft=False):
    return ray.util.scheduling_strategies.NodeAffinitySchedulingStrategy(
        node_id=node['NodeID'], soft=soft
    )

def alive(nodes):
    for node in nodes:
        if node['Alive']:
            yield node

redis_actor = RedisActor.remote()
redis_port = 7777
redis_hostname = ray.get(redis_actor.start.remote(port=redis_port))

print(redis_hostname, redis_port)
try:
    while True:
        import time
        time.sleep(1)
finally:
    ray.get(redis_actor.stop.remote())
