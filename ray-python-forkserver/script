#!/usr/bin/env python3

# Take a list of Python modules to import.
# Spawn N processes.

# Benchmark: spawn N processes with the imports loaded.
# We will measure with forkserver, and with normal start script and import.


import time

class ProcessStarter:
    def start_proc(self):
        raise NotImplementedError

class ForkBasedProcessStarter(ProcessStarter):
    def __init__(self):
        self._forkserver = None
    
    @property
    def fs(self):
        if self._forkserver is None:
            self._forkserver = Forkserver()
        return self._forkserver

    def start_proc(self):
        self.fs.create_proc()

class Forkserver:
    def __init__(self):
        from multiprocessing import Process, Pipe

        server_pipe, self.pipe = Pipe()

        args = (server_pipe,)
        self._server = Process(target=self._server_func, args=args)
        self._server.start()

    @staticmethod
    def _server_func(pipe):
        while True:
            r = pipe.recv()

            # Spawn process.
            # Use fork syscall.

            pipe.send('done')

    def create_proc(self):
        print('create proc')
        self.pipe.send('create')
        output = self.pipe.recv()
        assert 'done' in output, f'got {output}'

    def __del__(self):
        self._server.kill()
        self._server.join()

def wait_for_stream_to_emit_bytes(stream, bstr):
    import select

    proc_is_initialized = False
    data = b''
    while not proc_is_initialized:
        ready, _, _ = select.select([stream], [], [])
        data += ready[0].read1()
        proc_is_initialized = bstr in data

class SpawnBasedProcessStarter(ProcessStarter):
    def __init__(self):
        self._proc_list = []

    def start_proc(self):
        import subprocess
        proc = subprocess.Popen(
            "./user_script.py",
            stdout=subprocess.PIPE,
        )
        self._proc_list.append(proc)
        wait_for_stream_to_emit_bytes(proc.stdout, b'Sleeping forever.')

    def __del__(self):
        print(f'Killing {len(self._proc_list)} procs')
        for proc in self._proc_list:
            proc.kill()

def run_test(num_procs_to_start, method='default'):
    if method not in ['forkserver', 'default']:
        raise ValueError(f'unknown method {method}')

    cls = ForkBasedProcessStarter if method == 'forkserver' else SpawnBasedProcessStarter
    process_starter = cls()

    import time
    start_time = time.time()
    for i in range(num_procs_to_start):
        process_starter.start_proc()

    dur_s = time.time() - start_time
    print(f'{method} {num_procs_to_start} {dur_s:.02f}s')

    del process_starter

if __name__ == '__main__':
    num_procs = 1
    run_test(num_procs, 'forkserver')
    #run_test(num_procs, 'default')
