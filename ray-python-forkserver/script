#!/usr/bin/env python3

# Take a list of Python modules to import.
# Spawn N processes.

# Benchmark: spawn N processes with the imports loaded.
# We will measure with forkserver, and with normal start script and import.


import time

class ProcessStarter:
    def start_proc(self):
        raise NotImplementedError

class ForkBasedProcessStarter(ProcessStarter):
    
    @property
    def _forkserver(self):
        pass

    def start_proc(self):
        pass

class Forkserver:
    def __init__(self):
        pass

def wait_for_proc_to_emit_bytes(proc, bstr):
    import select

    proc_is_initialized = False
    data = b''
    while not proc_is_initialized:
        ready, _, _ = select.select([proc.stdout], [], [])
        data += ready[0].read1()
        proc_is_initialized = bstr in data

class SpawnBasedProcessStarter(ProcessStarter):
    def __init__(self):
        self._proc_list = []

    def start_proc(self):
        import subprocess
        print('starting proc')
        proc = subprocess.Popen(
            "./user_script.py",
            stdout=subprocess.PIPE,
        )
        self._proc_list.append(proc)
        wait_for_proc_to_emit_bytes(proc, b'Sleeping forever.')

    def __del__(self):
        print(f'Killing {len(self._proc_list)} procs')
        for proc in self._proc_list:
            proc.kill()

def run_test(num_procs_to_start, method='default'):
    if method not in ['forkserver', 'default']:
        raise ValueError(f'unknown method {method}')

    cls = ForkBasedProcessStarter if method == 'forkserver' else SpawnBasedProcessStarter
    process_starter = cls()

    import time
    start_time = time.time()
    for i in range(num_procs_to_start):
        process_starter.start_proc()

    dur_s = time.time() - start_time
    print(f'{method} {num_procs_to_start} {dur_s:.02f}s')

    del process_starter

if __name__ == '__main__':
    num_procs = 5
    #run_test(num_procs, 'forkserver')
    run_test(num_procs, 'default')
